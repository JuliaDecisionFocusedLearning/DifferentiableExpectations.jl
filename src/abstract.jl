"""
    DifferentiableExpectation{t}

Abstract supertype for differentiable parametric expectations `E : Œ∏ -> ùîº[f(X)]` where `X ‚àº p(Œ∏)`, whose value and derivative are approximated with Monte-Carlo averages.

# Subtypes

  - [`Reinforce`](@ref)
  - [`Reparametrization`](@ref)

# Calling behavior

    (E::DifferentiableExpectation)(Œ∏...; kwargs...)

Return a Monte-Carlo average `(1/S) ‚àëf(x·µ¢)` where the `x·µ¢ ‚àº p(Œ∏)` are iid samples.

# Type parameters

  - `threaded::Bool`: specifies whether the sampling should be performed in parallel

# Required fields

  - `f`: The function applied inside the expectation.
  - `dist_constructor`: The constructor of the probability distribution.
  - `rng::AbstractRNG`: The random number generator.
  - `nb_samples::Integer`: The number of Monte-Carlo samples.
  - `seed`::Union{Nothing,Integer}: The seed for the random number generator, reset before each call. Set to `nothing` for no seeding.

The field `dist_constructor` must be a callable such that `dist_constructor(Œ∏...)` generates an object `dist` that corresponds to `p(Œ∏)`.
The resulting object `dist` needs to satisfy:

  - the [Random API](https://docs.julialang.org/en/v1/stdlib/Random/#Hooking-into-the-Random-API) for sampling with `rand(rng, dist)`
  - the [DensityInterface.jl API](https://github.com/JuliaMath/DensityInterface.jl) for loglikelihoods with `logdensityof(dist, x)`
"""
abstract type DifferentiableExpectation{t} end

is_threaded(::DifferentiableExpectation{t}) where {t} = Val(t)

"""
    empirical_predistribution(E::DifferentiableExpectation, Œ∏...)

Return a uniform [`FixedAtomsProbabilityDistribution`](@ref) over `{x‚ÇÅ, ..., x‚Çõ}`, where the `x·µ¢ ‚àº p(Œ∏)` are iid samples.
"""
function empirical_predistribution(E::DifferentiableExpectation, Œ∏...)
    (; dist_constructor, rng, nb_samples, seed) = E
    dist = dist_constructor(Œ∏...)
    isnothing(seed) || seed!(rng, seed)
    xs = maybe_eachcol(rand(rng, dist, nb_samples))
    xdist = FixedAtomsProbabilityDistribution(xs; threaded=unval(is_threaded(E)))
    return xdist
end

"""
    empirical_distribution(E::DifferentiableExpectation, Œ∏...; kwargs...)

Return a uniform [`FixedAtomsProbabilityDistribution`](@ref) over `{f(x‚ÇÅ), ..., f(x‚Çõ)}`, where the `x·µ¢ ‚àº p(Œ∏)` are iid samples.
"""
function empirical_distribution(E::DifferentiableExpectation, Œ∏...; kwargs...)
    xdist = empirical_predistribution(E, Œ∏...)
    fk = FixKwargs(E.f, kwargs)
    ydist = map(fk, xdist)
    return ydist
end

function (E::DifferentiableExpectation)(Œ∏...; kwargs...)
    ydist = empirical_distribution(E, Œ∏...; kwargs...)
    return mean(ydist)
end
